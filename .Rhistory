data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwins)/(as.numeric(wwins)+as.numeric(wlosses)))))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewins)/(as.numeric(ewins)+as.numeric(elosses))))
year <- c(year, rep(i,30))
}
win_loss <- data_frame()
year <- c()
for(i in c(2010,2015,2016)){
endseason <- read_html("http://www.basketball-reference.com/leagues/NBA_" %+% i %+% ".html")
#extract east relevant statistics as strings then classify into relevant vectors
east <- endseason %>%
html_nodes('#divs_standings_E .right , #divs_standings_E .left') %>%
html_text()
eteams <- east[seq(9,128,8)]
ewins <- east[seq(10,128,8)]
elosses <- east[seq(11,128,8)]
ewinpct <- east[seq(12,128,8)]
#extract west relevant statistics then classify into relevant vectors
west <- endseason %>%
html_nodes('#divs_standings_W .right , #divs_standings_W .left') %>%
html_text()
wteams <- west[seq(9,128,8)]
wwins <- west[seq(10,128,8)]
wlosses <- west[seq(11,128,8)]
wwinpct <- west[seq(12,128,8)]
#create tibble of first iteration set to be bound with other iterations
win_loss <- rbind(win_loss,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwins)/(as.numeric(wwins)+as.numeric(wlosses))))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewins)/(as.numeric(ewins)+as.numeric(elosses))))
year <- c(year, rep(i,30))
}
win_loss
win_loss <- data_frame()
year <- c()
for(i in c(2010,2015,2016)){
endseason <- read_html("http://www.basketball-reference.com/leagues/NBA_" %+% i %+% ".html")
#extract east relevant statistics as strings then classify into relevant vectors
east <- endseason %>%
html_nodes('#divs_standings_E .right , #divs_standings_E .left') %>%
html_text()
eteams <- east[seq(9,128,8)]
ewins <- east[seq(10,128,8)]
elosses <- east[seq(11,128,8)]
ewinpct <- east[seq(12,128,8)]
#extract west relevant statistics then classify into relevant vectors
west <- endseason %>%
html_nodes('#divs_standings_W .right , #divs_standings_W .left') %>%
html_text()
wteams <- west[seq(9,128,8)]
wwins <- west[seq(10,128,8)]
wlosses <- west[seq(11,128,8)]
wwinpct <- west[seq(12,128,8)]
#create tibble of first iteration set to be bound with other iterations
win_loss <- rbind(win_loss,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwinpct)))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewinpct)))
year <- c(year, rep(i,30))
}
win_loss
for(i in c(2003:2009, 2011:2014)){
endseason <- read_html("http://www.basketball-reference.com/leagues/NBA_" %+% i %+% ".html")
#extract east relevant statistics then classify into relevant vectors
east <- endseason %>%
html_nodes('#divs_standings_E .right , #divs_standings_E .left') %>%
html_text()
east <- c("Teams", east)
eteams <- east[seq(9,128,8)]
ewins <- east[seq(10,128,8)]
elosses <- east[seq(11,128,8)]
ewinpct <- east[seq(12,128,8)]
#extract west relevant statistics then classify into relevant vectors
west <- endseason %>%
html_nodes('#divs_standings_W .right , #divs_standings_W .left') %>%
html_text()
west <- c("Teams", west)
wteams <- west[seq(9,128,8)]
wwins <- west[seq(10,128,8)]
wlosses <- west[seq(11,128,8)]
wwinpct <- west[seq(12,128,8)]
#create tibble of second iteration set to be bound with other iterations
win_loss <- rbind(win_loss,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwinpct)))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewinpct)))
year <- c(year, rep(i,30))
}
win_loss
win_loss[400]
win_loss[400,]
for(i in c(2010,2015,2016)){
endseason <- read_html("http://www.basketball-reference.com/leagues/NBA_" %+% i %+% ".html")
#extract east relevant statistics as strings then classify into relevant vectors
east <- endseason %>%
html_nodes('#divs_standings_E .right , #divs_standings_E .left') %>%
html_text()
eteams <- east[seq(9,128,8)]
ewins <- east[seq(10,128,8)]
elosses <- east[seq(11,128,8)]
ewinpct <- east[seq(12,128,8)]
#extract west relevant statistics then classify into relevant vectors
west <- endseason %>%
html_nodes('#divs_standings_W .right , #divs_standings_W .left') %>%
html_text()
wteams <- west[seq(9,128,8)]
wwins <- west[seq(10,128,8)]
wlosses <- west[seq(11,128,8)]
wwinpct <- west[seq(12,128,8)]
#create tibble of first iteration set to be bound with other iterations
win_loss <- rbind(win_loss,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwinpct)))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewinpct)))
year <- c(year, rep(i,30))
}
wteams
east
rm(list-ls())
rm(list=ls())
source("https://raw.githubusercontent.com/julbautista/Startup/master/julian_startup.R")
setwd("C:/Users/Julian Bautista/Documents/Portfolio/Playoff Basketball")
library(rvest)
allstar <- read_html("http://www.basketball-reference.com/allstar/")
dates <- allstar %>%
html_nodes('#all_star_games_nba td:nth-child(3) a') %>%
html_text()
dates <- dates[2:15]
rm(allstar)
win_loss <- data_frame()
year <- c()
for(i in c(2010,2015,2016)){
endseason <- read_html("http://www.basketball-reference.com/leagues/NBA_" %+% i %+% ".html")
#extract east relevant statistics as strings then classify into relevant vectors
east <- endseason %>%
html_nodes('#divs_standings_E .right , #divs_standings_E .left') %>%
html_text()
eteams <- east[seq(8,128,8)]
ewins <- east[seq(9,128,8)]
elosses <- east[seq(10,128,8)]
ewinpct <- east[seq(11,128,8)]
#extract west relevant statistics then classify into relevant vectors
west <- endseason %>%
html_nodes('#divs_standings_W .right , #divs_standings_W .left') %>%
html_text()
wteams <- west[seq(8,128,8)]
wwins <- west[seq(9,128,8)]
wlosses <- west[seq(10,128,8)]
wwinpct <- west[seq(11,128,8)]
#create tibble of first iteration set to be bound with other iterations
win_loss <- rbind(win_loss,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwinpct)))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewinpct)))
year <- c(year, rep(i,30))
}
win_loss
eteams[1]
east[8]
east[9]
wteams
wteams[1]
wteams[2]
west[8]
west[9]
west[10,11,12]
west[12]
west[128]
west[127]
east[128]
east[127]
128-8
for(i in c(2010,2015,2016)){
endseason <- read_html("http://www.basketball-reference.com/leagues/NBA_" %+% i %+% ".html")
#extract east relevant statistics as strings then classify into relevant vectors
east <- endseason %>%
html_nodes('#divs_standings_E .right , #divs_standings_E .left') %>%
html_text()
eteams <- east[seq(8,120,8)]
ewins <- east[seq(9,120,8)]
elosses <- east[seq(10,120,8)]
ewinpct <- east[seq(11,120,8)]
#extract west relevant statistics then classify into relevant vectors
west <- endseason %>%
html_nodes('#divs_standings_W .right , #divs_standings_W .left') %>%
html_text()
wteams <- west[seq(8,120,8)]
wwins <- west[seq(9,120,8)]
wlosses <- west[seq(10,120,8)]
wwinpct <- west[seq(11,120,8)]
#create tibble of first iteration set to be bound with other iterations
win_loss <- rbind(win_loss,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwinpct)))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewinpct)))
year <- c(year, rep(i,30))
}
west[120]
win_loss <- data_frame()
year <- c()
for(i in c(2010,2015,2016)){
endseason <- read_html("http://www.basketball-reference.com/leagues/NBA_" %+% i %+% ".html")
#extract east relevant statistics as strings then classify into relevant vectors
east <- endseason %>%
html_nodes('#divs_standings_E .right , #divs_standings_E .left') %>%
html_text()
eteams <- east[seq(8,120,8)]
ewins <- east[seq(9,121,8)]
elosses <- east[seq(10,122,8)]
ewinpct <- east[seq(11,123,8)]
#extract west relevant statistics then classify into relevant vectors
west <- endseason %>%
html_nodes('#divs_standings_W .right , #divs_standings_W .left') %>%
html_text()
wteams <- west[seq(8,120,8)]
wwins <- west[seq(9,121,8)]
wlosses <- west[seq(10,122,8)]
wwinpct <- west[seq(11,123,8)]
#create tibble of first iteration set to be bound with other iterations
win_loss <- rbind(win_loss,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwinpct)))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewinpct)))
year <- c(year, rep(i,30))
}
for(i in c(2003:2009, 2011:2014)){
endseason <- read_html("http://www.basketball-reference.com/leagues/NBA_" %+% i %+% ".html")
#extract east relevant statistics then classify into relevant vectors
east <- endseason %>%
html_nodes('#divs_standings_E .right , #divs_standings_E .left') %>%
html_text()
east <- c("Teams", east)
eteams <- east[seq(9,128,8)]
ewins <- east[seq(10,128,8)]
elosses <- east[seq(11,128,8)]
ewinpct <- east[seq(12,128,8)]
#extract west relevant statistics then classify into relevant vectors
west <- endseason %>%
html_nodes('#divs_standings_W .right , #divs_standings_W .left') %>%
html_text()
west <- c("Teams", west)
wteams <- west[seq(9,128,8)]
wwins <- west[seq(10,128,8)]
wlosses <- west[seq(11,128,8)]
wwinpct <- west[seq(12,128,8)]
#create tibble of second iteration set to be bound with other iterations
win_loss <- rbind(win_loss,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwinpct)))
win_loss <- rbind(win_loss,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewinpct)))
year <- c(year, rep(i,30))
}
win_loss <- add_column(win_loss, year)
rm(year,wteams,wwins,wlosses,wwinpct,eteams,ewins,elosses,ewinpct,east,west,endseason)
win_loss <- arrange(win_loss, year, as.character(teams))
win_loss
day <- substring(dates,5, regexpr(",", dates) -1)[1:14]
season <- substring(dates,regexpr(",", dates) + 2, 14)[1:14]
year <- c()
mid_season <- data_frame()
for(i in 1:14){
prestar <- read_html("http://www.basketball-reference.com/friv/standings.fcgi?month=2" %+%
"&day=" %+% day[i] %+%
"&year=" %+% season[i] %+% "&lg_id=NBA")
#extract east relevant statistics then classify into relevant vectors
east <- prestar %>%
html_nodes('#standings_e .left , #standings_e .right') %>%
html_text()
eteams <- east[seq(10,144,9)]
ewins <- east[seq(11,144,9)]
elosses <- east[seq(12,144,9)]
ewinpct <- east[seq(13,144,9)]
#extract west relevant statistics then classify into relevant vectors
west <- prestar %>%
html_nodes('#standings_w .left , #standings_w .right') %>%
html_text()
wteams <- west[seq(10,144,9)]
wwins <- west[seq(11,144,9)]
wlosses <- west[seq(12,144,9)]
wwinpct <- west[seq(13,144,9)]
#create tibble of first iteration set to be bound with other iterations
mid_season <- rbind(mid_season,
data_frame(teams = wteams, wins = as.numeric(wwins), losses = as.numeric(wlosses), winpct = as.numeric(wwinpct)))
mid_season <- rbind(mid_season,
data_frame(teams = eteams, wins = as.numeric(ewins), losses = as.numeric(elosses), winpct = as.numeric(ewinpct)))
year <- c(year, rep(season[i], 30))
}
year <- as.numeric(year)
mid_season <- add_column(mid_season, year)
rm(year,wteams,wwins,wlosses,wwinpct,eteams,ewins,elosses,ewinpct,east,west, prestar)
mid_season <- arrange(mid_season, year, teams)
teams <- win_loss$teams
wins <- win_loss$wins - mid_season$wins
losses <- win_loss$losses - mid_season$losses
year <- win_loss$year
winpct <- wins/(wins+losses)
playoffs <- grepl("\\*", teams)
post_break <- data_frame(teams, wins, losses, winpct, year)
post_break <- post_break[playoffs,]
win_loss <- win_loss[playoffs,]
rm(teams,wins, losses, year, winpct, playoffs, mid_season, dates, day, season)
year <- c()
playoffs <- c()
for(i in 2003:2016){
postseason <- read_html("http://www.basketball-reference.com/playoffs/NBA_" %+% i %+% ".html")
series <- postseason %>%
html_nodes('#all_playoffs td:nth-child(2)') %>%
html_text()
playoffs <- c(playoffs, series)
year <- c(year, rep(i, length(series)))
}
playoffs <- data_frame(series = playoffs[nchar(playoffs) > 13], year = year[nchar(playoffs) > 13])
winner <- substring(playoffs$series,
1,
regexpr(" over ", playoffs$series)-1)
loser <- substring(playoffs$series,
regexpr(" over ", playoffs$series) + 6,
regexpr("\\(", playoffs$series) - 2)
wins <- c(substring(playoffs$series,
regexpr("\\(", playoffs$series) +1,
regexpr("\\(", playoffs$series) +1),
substring(playoffs$series,
regexpr("\\)", playoffs$series) -1,
regexpr("\\)", playoffs$series) -1))
losses <- c(substring(playoffs$series,
regexpr("\\)", playoffs$series) -1,
regexpr("\\)", playoffs$series) -1),
substring(playoffs$series,
regexpr("\\(", playoffs$series) +1,
regexpr("\\(", playoffs$series) +1))
wins <- as.numeric(wins)
losses <- as.numeric(losses)
results <- data_frame(teams = c(winner,loser), wins, losses, year = c(playoffs$year,playoffs$year))
playoffs <- results %>% group_by(teams, year) %>% summarise(wintotal = sum(wins), losstotal = sum(losses))
playoffs <- arrange(playoffs, year, teams)
rm(results, winner, wins, losses, loser, series, postseason, year)
playoffs
?grepl
grepl("\\*", win_loss$teams)
substring("abac", 4, 6)
substring("abfawfjoaiwfjawowifjac", 4, 6)
grepl("([0-9])", win_loss$teams[1])
regexpr("([0-9])", win_loss$teams[1])
regexpr("([0-9])", win_loss$teams[4])
regexpr("([0-9])", win_loss$teams[24])
win_loss$teams[24]
win_loss$teams[24][21]
as.numeric(regexpr("([0-9])", win_loss$teams[24]))
substring(win_loss$teams[24], regexpr("([0-9])", win_loss$teams[24])
)
substring(win_loss$teams[24], regexpr("([0-9])", win_loss$teams[24]), regexpr("([0-9])", win_loss$teams[24]) +1 )
substring(win_loss$teams[24], regexpr("([0-9])", win_loss$teams[24]), regexpr("([0-9])", win_loss$teams[24]))
seed <- substring(win_loss$teams, regexpr("([0-9])", win_loss$teams), regexpr("([0-9])", win_loss$teams))
win_loss$teams
?substring
seed <- as.numeric(substring(win_loss$teams, regexpr("([0-9])", win_loss$teams), regexpr("([0-9])", win_loss$teams)))
cbind(seed, win_loss$teams)
seed <- as.numeric(substring(win_loss$teams, regexpr("([0-9])", win_loss$teams), regexpr("([0-9])", win_loss$teams)))
cbind(seed, win_loss$teams)
final <- data_frame(teams = playoffs$teams, seed, year = playoffs$year, playoffwins = playoffs$wintotal, season = win_loss$winpct, allstar = post_break$winpct, playoffpct)
playoffpct <- playoffs$wintotal/(playoffs$wintotal + playoffs$losstotal)
final <- data_frame(teams = playoffs$teams, seed, year = playoffs$year, playoffwins = playoffs$wintotal, season = win_loss$winpct, allstar = post_break$winpct, playoffpct)
rm(playoffs,post_break,win_loss,i, playoffpct)
final
?write.csv
write.csv(final, file = "Playoff Data.csv")
a <- ggplot(final, aes(season, playoffwins)) + jbplot + geom_point() + geom_smooth() + ggtitle("Regular Season Win % on Raw Playoff Wins")
a <- ggplot(final, aes(season, playoffwins)) + geom_point() + geom_smooth() + ggtitle("Regular Season Win % on Raw Playoff Wins")
b <- ggplot(final, aes(allstar, playoffwins)) + geom_point() + geom_smooth() + ggtitle("Post-All Star Break Win % on Raw Playoff Wins")
c <- ggplot(final, aes(season, playoffpct)) + geom_point() + geom_smooth() + ggtitle("Regular Season Win % on Playoff Win %")
d <- ggplot(final, aes(allstar, playoffpct)) + geom_point() + geom_smooth(method ="lm") + ggtitle("Post-All Star Break Win % on Playoff Win %")
plot_grid(a,b,c,d, nrow = 2, ncol = 2)
multiplot(a,b,c,d, nrow = 2, ncol = 2)
multiplot(a,b,c,d, cols = 2)
regwins <- final$season
playoffwins <- final$playoffpct
latewins <- final$allstar
N <- length(regwins)
stanc("simple model.stan")$status
stanc("simple model.stan")$status
regwins <- final$season
playoffwins <- final$playoffpct
latewins <- final$allstar
seed <- final$seed
N <- length(regwins)
stanc("simple model.stan")$status
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = c("N","regwins","playoffwins","latewins", "seed"),
iter = 1000, chains = 3)
beep()
regwins <- final$season
playoffwins <- final$playoffpct
latewins <- final$allstar
seed <- final$seed
N <- length(regwins)
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = c("N","regwins","playoffwins","latewins", "seed"),
iter = 1000, chains = 3)
regwins
fit1 <- stan("simple model.stan",
data = c("N","regwins","playoffwins","latewins", "seed"),
iter = 1000, chains = 3)
fit1 <- stan("simple model.stan",
data = c("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
seed
str(seed)
str(latewins)
rm(list = ls())
source("C:/Users/Julian Bautista/Documents/Portfolio/Playoff Basketball/Data Scraping.R")
regwins <- final$season
playoffwins <- final$playoffpct
latewins <- final$allstar
seed <- final$seed
N <- length(regwins)
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = c("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
beep()
final2 <- final
final <- read.csv("Playoff Data.csv")
final
?write.csv
write.csv(final2, "playoff data.csv", row.names = F)
final <- read.csv("Playoff Data.csv")
final <- read.csv("https://raw.githubusercontent.com/julbautista/Playoff-Basketball/master/Playoff%20Data.csv")
regwins <- final$season
playoffwins <- final$playoffpct
latewins <- final$allstar
seed <- final$seed
N <- length(regwins)
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = c("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
fit1 <- stan("simple model.stan",
data = c("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
beep()
stanc("simple model.stan")$status
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = c("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
stanc("simple model.stan")$status
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
beep()
beep()
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
seed <- array(final$seed)
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
seed <- array(final$seed, dim = c(N, 1))
seed
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
seed <- array(final$seed, dim = N)
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
is.array(seed)
is.list(seed)
str(seed)
str(N)
is.array(N)
is.list(N)
regwins <- final$season
playoffwins <- final$playoffpct
latewins <- final$allstar
N <- length(regwins)
seed <- array(final$seed, dim = N)
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
str(seed)
max(seed)
min(seed)
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)
?seed
final <- read.csv("https://raw.githubusercontent.com/julbautista/Playoff-Basketball/master/Playoff%20Data.csv")
regwins <- final$season
playoffwins <- final$playoffpct
latewins <- final$allstar
N <- length(regwins)
seed <- array(final$seed, dim = N)
stanc("simple model.stan")$status
fit1 <- stan("simple model.stan",
data = list("N","seed", "regwins","playoffwins","latewins"),
iter = 1000, chains = 3)

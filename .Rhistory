bracket_valid <- function(x){
#pull out a vector of each appearance of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,2)
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(round_open < round_close) |
all(square_open < square_close) |
all(curly_open < curly_close)){
return(c(FALSE,3))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,4))
}
}
bracket_valid <- function(x){
#pull out a vector of each appearance of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,2)
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(round_open < round_close) |
all(square_open < square_close) |
all(curly_open < curly_close)) {
return(c(FALSE,3))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,4))
}
}
bracket_valid <- function(x){
#pull out a vector of each appearance of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,2)
}
#if any closed bracket occurs before any open bracket return FALSE
else if(all(round_open < round_close) |
all(square_open < square_close) |
all(curly_open < curly_close)) {
return(c(FALSE,3))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,4))
}
}
bracket_valid <- function(x){
#pull out a vector of each appearance of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,2))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(round_open < round_close) |
all(square_open < square_close) |
all(curly_open < curly_close)) {
return(c(FALSE,3))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,4))
}
}
bracket_valid("potato")
bracket_valid("pota(to")
bracket_valid("pota)to")
bracket_valid("potato)")
bracket_valid("potato(")
bracket_valid("potato`(")
bracket_valid("potato`(`")
unlist(gregexpr("\\(", c("pota(")))
unlist(gregexpr("\\)", c("pota)")))
bracket_valid("potato(")
bracket_valid("potato)")
unlist(gregexpr("\\(", c("pota(")))
length(unlist(gregexpr("\\(", c("pota("))))
length(unlist(gregexpr("\\)", c("pota("))))
length(unlist(gregexpr("\\(", c("pota)"))))
length(unlist(gregexpr("\\)", c("pota)"))))
bracket_valid("potato)")
bracket_valid("potato(")
(unlist(gregexpr("\\(", c("pota)"))))
(unlist(gregexpr("\\)", c("pota)"))))
bracket_valid("potato(")
(unlist(gregexpr("\\(", c("pota("))))
(unlist(gregexpr("\\)", c("pota("))))
abs(1,2,3)
abs(c(1,2,3))
bracket_valid <- function(x){
#pull out a vector of each appearance of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,2))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) < abs(round_close)) |
all(abs(square_open) < abs(square_close)) |
all(abs(curly_open) < abs(curly_close))) {
return(c(FALSE,3))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,4))
}
}
bracket_valid("potato(")
bracket_valid("potato())")
bracket_valid("potato((")
bracket_valid("potato(")
bracket_valid("potato(")
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,2))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) < abs(round_close)) |
all(abs(square_open) < abs(square_close)) |
all(abs(curly_open) < abs(curly_close))) {
return(c(FALSE,3))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,4))
}
}
bracket_valid("potato(")
bracket_valid("potato(")
bracket_valid("potato()")
(unlist(gregexpr("\\(", c("pota("))))
(unlist(gregexpr("\\)", c("pota("))))
abs(unlist(gregexpr("\\(", c("pota("))))
abs(unlist(gregexpr("\\)", c("pota("))))
abs(unlist(gregexpr("\\(", "pota(")))
abs(unlist(gregexpr("\\)", "pota(")))
(unlist(gregexpr("\\(", "pota(")))
(unlist(gregexpr("\\)", "pota(")))
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,2))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) > abs(round_close)) |
all(abs(square_open) > abs(square_close)) |
all(abs(curly_open) > abs(curly_close))) {
return(c(FALSE,3))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,4))
}
}
bracket_valid("potato()")
bracket_valid("potato(")
bracket_valid("potato)")
abs(unlist(gregexpr("\\(", "pota(")))
abs(unlist(gregexpr("\\)", "pota(")))
abs(unlist(gregexpr("\\(", "pota)")))
abs(unlist(gregexpr("\\)", "pota)")))
(unlist(gregexpr("\\(", "pota)")))
(unlist(gregexpr("\\)", "pota)")))
?gregexpr
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are no round opening brackets
}else if(round_open == -1 |
square_open == -1 |
curly_open == -1)){
return(c(FALSE,2))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,3))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) > abs(round_close)) |
all(abs(square_open) > abs(square_close)) |
all(abs(curly_open) > abs(curly_close))) {
return(c(FALSE,4))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,5))
}
}
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are no round opening brackets
}else if(round_open == -1 |
square_open == -1 |
curly_open == -1){
return(c(FALSE,2))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,3))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) > abs(round_close)) |
all(abs(square_open) > abs(square_close)) |
all(abs(curly_open) > abs(curly_close))) {
return(c(FALSE,4))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,5))
}
}
bracket_valid("potato)")
bracket_valid("potato()()()())")
bracket_valid("potato()()()()(")
bracket_valid("potato()()()()()")
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are no round opening brackets
}else if( (length(round_open) == 1 | length(square_open) == 1 | length(curly_open) == 1) && (round_open == -1 | square_open == -1 |curly_open == -1)){
return(c(FALSE,2))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,3))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) > abs(round_close)) |
all(abs(square_open) > abs(square_close)) |
all(abs(curly_open) > abs(curly_close))) {
return(c(FALSE,4))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,5))
}
}
bracket_valid("potato()()()()()")
bracket_valid("potato()()()()()")
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are no round opening brackets
}else if(round_open[1] == -1 | square_open[1] == -1 |curly_open[1] == -1){
#return(c(FALSE,2))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,3))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) > abs(round_close)) |
all(abs(square_open) > abs(square_close)) |
all(abs(curly_open) > abs(curly_close))) {
return(c(FALSE,4))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,5))
}
}
bracket_valid("potato()()()()()")
bracket_valid("potato()()()()()")
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are no round opening brackets
}else if(round_open[1] == -1 | square_open[1] == -1 |curly_open[1] == -1){
return(c(FALSE,2))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,3))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) > abs(round_close)) |
all(abs(square_open) > abs(square_close)) |
all(abs(curly_open) > abs(curly_close))) {
return(c(FALSE,4))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,5))
}
}
bracket_valid("potato()()()()()")
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are no round opening brackets
}else if(round_open[[1]] == -1 | square_open[[1]] == -1 |curly_open[[1]] == -1){
return(c(FALSE,2))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,3))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) > abs(round_close)) |
all(abs(square_open) > abs(square_close)) |
all(abs(curly_open) > abs(curly_close))) {
return(c(FALSE,4))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,5))
}
}
bracket_valid("potato()()()()()")
unlist(gregexpr("\\(", "potato()()()()()"))
unlist(gregexpr("\\(", "potato()()()()()"))
unlist(gregexpr("\\(", "potato()()()()()"))[1]
unlist(gregexpr("\\(", "potato()()()()()"))[[1]]
bracket_valid("potato()()()()()")
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#all <- c(round_open, round_close, square_close, square_open, curly_open, curly_close)
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are no round opening brackets
}else if(round_open[[1]] == -1 && square_open[[1]] == -1 && curly_open[[1]] == -1){
return(c(FALSE,2))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,3))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(abs(round_open) > abs(round_close)) |
all(abs(square_open) > abs(square_close)) |
all(abs(curly_open) > abs(curly_close))) {
return(c(FALSE,4))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,5))
}
}
bracket_valid("potato()()()()()")
bracket_valid("potato()()()()()(")
bracket_valid("potato))")
bracket_valid <- function(x){
#pull out a vector of indices of each index of a bracket
round_open <- unlist(gregexpr("\\(", x))
round_close <- unlist(gregexpr("\\)", x))
square_open <- unlist(gregexpr("\\[", x))
square_close <- unlist(gregexpr("\\]", x))
curly_open <- unlist(gregexpr("\\{", x))
curly_close <- unlist(gregexpr("\\}", x))
#if there are no brackets at all (ie index of -1), return TRUE
if(round_open == -1 && round_close == -1 && square_close == -1 && square_open == -1 && curly_open == -1 && curly_close == -1){
return(c(TRUE,1))
#if there are no opening brackets return FALSE
}else if(round_open[[1]] == -1 && square_open[[1]] == -1 && curly_open[[1]] == -1){
return(c(FALSE,2))
#if there are too many open or closed brackets return FALSE
}else if(length(round_open) != length(round_close) |
length(square_open) != length(square_close) |
length(curly_open) != length(curly_close)){
return(c(FALSE,3))
#if any closed bracket occurs before any open bracket return FALSE
}else if(all(round_open > round_close) |
all(square_open > square_close) |
all(curly_open > curly_close)) {
return(c(FALSE,4))
#must be true if all of above are fulfilled
}else{
return(c(TRUE,5))
}
}
bracket_valid("potato")
bracket_valid("potato(")
bracket_valid("potato([)")
bracket_valid("potato(")
bracket_valid("potato)")
b
c(b,4)
?tail
3 in b
(3 in b)
